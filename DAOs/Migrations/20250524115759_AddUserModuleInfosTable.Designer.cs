// <auto-generated />
using System;
using DAOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAOs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524115759_AddUserModuleInfosTable")]
    partial class AddUserModuleInfosTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CourseId"));

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<long?>("ArchivedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("archived_by");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("EnrollmentCount")
                        .HasColumnType("bigint")
                        .HasColumnName("enrollment_count");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("interval")
                        .HasColumnName("estimated_duration");

                    b.Property<long>("HistoricalPeriodId")
                        .HasColumnType("bigint")
                        .HasColumnName("historical_period_id");

                    b.Property<bool>("IsCertificateAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_certificate_available");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<string>("LearningOutcomes")
                        .HasColumnType("text")
                        .HasColumnName("learning_outcomes");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<long?>("PrerequisiteCourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("prerequisite_course_id");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<string>("PromoVideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("promo_video_url");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HistoricalPeriodId");

                    b.HasIndex("RegionId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("BusinessObjects.Models.HistoricalPeriod", b =>
                {
                    b.Property<long>("HistoricalPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("historical_period_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("HistoricalPeriodId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EndYear")
                        .HasColumnType("text")
                        .HasColumnName("end_year");

                    b.Property<string>("HistoricalPeriodName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("historical_period_name");

                    b.Property<string>("StartYear")
                        .HasColumnType("text")
                        .HasColumnName("start_year");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("HistoricalPeriodId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("historical_periods");
                });

            modelBuilder.Entity("BusinessObjects.Models.LoginHistory", b =>
                {
                    b.Property<long>("LoginHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("login_history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LoginHistoryId"));

                    b.Property<string>("IPAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("LoginResult")
                        .HasColumnType("text")
                        .HasColumnName("login_result");

                    b.Property<DateTime>("LoginTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_timestamp");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("login_histories");
                });

            modelBuilder.Entity("BusinessObjects.Models.Module", b =>
                {
                    b.Property<long>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ModuleId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ModuleTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("module_title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("BusinessObjects.Models.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RegionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("RegionId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyOption", b =>
                {
                    b.Property<long>("SurveyOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("survey_option_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SurveyOptionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("SurveyOptionContent")
                        .HasColumnType("text")
                        .HasColumnName("survey_option_content");

                    b.Property<long>("SurveyQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("survey_question_id");

                    b.HasKey("SurveyOptionId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("survey_options");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyQuestion", b =>
                {
                    b.Property<long>("SurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("survey_question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SurveyQuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("SurveyQuestionName")
                        .HasColumnType("text")
                        .HasColumnName("survey_question_content");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("survey_questions");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("BannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("banned_at");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool>("IsSurveyed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_surveyed");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserCourseInfo", b =>
                {
                    b.Property<long>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("InfoId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<TimeSpan?>("CompletedIn")
                        .HasColumnType("interval")
                        .HasColumnName("completed_in");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enrollment_status");

                    b.Property<string>("LearningStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("learning_status");

                    b.Property<decimal>("ProgressPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("progress_percent");

                    b.Property<int>("Streak")
                        .HasColumnType("integer")
                        .HasColumnName("streak");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("InfoId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("user_course_infos");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserModuleInfo", b =>
                {
                    b.Property<long>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("InfoId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<TimeSpan?>("CompletedIn")
                        .HasColumnType("interval")
                        .HasColumnName("completed_in");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("InfoId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_module_infos");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserOptionChoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("SurveyOptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("survey_option_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SurveyOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("user_option_choices");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserPremiumInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubcriptionAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subcription_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_premium_info");
                });

            modelBuilder.Entity("BusinessObjects.Models.VerificationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("verification_info");
                });

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "CreatedCourseUser")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.HistoricalPeriod", "CourseHistoricalPeriod")
                        .WithMany("Courses")
                        .HasForeignKey("HistoricalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Region", "CourseRegion")
                        .WithMany("Courses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseHistoricalPeriod");

                    b.Navigation("CourseRegion");

                    b.Navigation("CreatedCourseUser");
                });

            modelBuilder.Entity("BusinessObjects.Models.HistoricalPeriod", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "CreatedUser")
                        .WithMany("CreatedHistoricalPeriods")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("BusinessObjects.Models.LoginHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Module", b =>
                {
                    b.HasOne("BusinessObjects.Models.Course", "ModuleCourse")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "ModuleCreator")
                        .WithMany("Modules")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModuleCourse");

                    b.Navigation("ModuleCreator");
                });

            modelBuilder.Entity("BusinessObjects.Models.Region", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "CreatedUser")
                        .WithMany("CreatedRegions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyOption", b =>
                {
                    b.HasOne("BusinessObjects.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyQuestion", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "CreatedByUser")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserCourseInfo", b =>
                {
                    b.HasOne("BusinessObjects.Models.Course", "Course")
                        .WithMany("UserCourseInfos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("UserCourseInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserModuleInfo", b =>
                {
                    b.HasOne("BusinessObjects.Models.Module", "Module")
                        .WithMany("UserModuleInfos")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "ModuleUser")
                        .WithMany("UserModuleInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ModuleUser");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserOptionChoice", b =>
                {
                    b.HasOne("BusinessObjects.Models.SurveyOption", "SurveyOption")
                        .WithMany("UserOptionChoices")
                        .HasForeignKey("SurveyOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("UserOptionChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserPremiumInfo", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "UserPremium")
                        .WithMany("UserPremiumInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserPremium");
                });

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("UserCourseInfos");
                });

            modelBuilder.Entity("BusinessObjects.Models.HistoricalPeriod", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BusinessObjects.Models.Module", b =>
                {
                    b.Navigation("UserModuleInfos");
                });

            modelBuilder.Entity("BusinessObjects.Models.Region", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyOption", b =>
                {
                    b.Navigation("UserOptionChoices");
                });

            modelBuilder.Entity("BusinessObjects.Models.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyOptions");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("CreatedHistoricalPeriods");

                    b.Navigation("CreatedRegions");

                    b.Navigation("LoginHistories");

                    b.Navigation("Modules");

                    b.Navigation("SurveyQuestions");

                    b.Navigation("UserCourseInfos");

                    b.Navigation("UserModuleInfos");

                    b.Navigation("UserOptionChoices");

                    b.Navigation("UserPremiumInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
